coding_task,step_n,solution_version,code_solution,code_status,focused_test_name,focused_test_source,focused_test_result,pass_rate,solution_code_file
"Calculate the correlation matrix of a DataFrame and plot a scatter plot for the pair of columns with the highest absolute correlation. Exception Handling: - Raises ValueError if the input DataFrame is empty. - Raises TypeError if any column in the DataFrame is non-numeric. - Raises ValueError if the DataFrame has fewer than two columns.
The function should output with:
    ax (plt.Axes): The scatter plot of the pair of columns with the highest absolute correlation.
You should write self-contained code starting with:
```
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
def task_func(dataframe):
```",0,0,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
def task_func(dataframe):

    pass
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
def task_func(dataframe):
    if dataframe.empty:
        raise ValueError(""Input DataFrame is empty"")

    if not all(dataframe.dtypes.apply(pd.api.types.is_numeric_dtype)):
        raise TypeError(""Non-numeric column(s) found in the DataFrame"")

    if len(dataframe.columns) < 2:
        raise ValueError(""DataFrame must have at least two columns"")

    corr_matrix = dataframe.corr().abs()
    np.fill_diagonal(corr_matrix.values, 0)  # Set diagonal values to 0 to avoid self-correlation

    max_corr_pair = corr_matrix.unstack().idxmax()
    col1, col2 = max_corr_pair

    fig, ax = plt.subplots()
    ax.scatter(dataframe[col1], dataframe[col2])
    ax.set_xlabel(col1)
    ax.set_ylabel(col2)

    return ax
data = {
    'A': [1, 2, 3, 4, 5],
    'B': [2, 4, 6, 8, 10],
    'C': [3, 6, 9, 12, 15]
}
df = pd.DataFrame(data)",fail,test_high_correlation,"    def test_high_correlation(self):
        """"""
        Test if the function correctly identifies and plots the pair of columns with the highest positive correlation.
        """"""
        np.random.seed(0)  # Set a fixed seed for reproducibility
        df = pd.DataFrame(
            {""A"": np.arange(100), ""B"": np.arange(100) * 2, ""C"": np.random.rand(100)}
        )
        ax = task_func(df)
        corr = df.corr()
        abs_corr = corr.abs()
        max_corr = abs_corr.unstack().dropna().nlargest(3).iloc[-1]
        expected_pair = np.where(abs_corr == max_corr)
        expected_labels = (
            df.columns[expected_pair[0][0]],
            df.columns[expected_pair[1][0]],
        )
        self.assertEqual((ax.get_xlabel(), ax.get_ylabel()), expected_labels)","{'stat': 'fail', 'exception_type': ""AssertionError: Tuples differ: ('A', 'B') != ('A', 'A')\n\nFirst differing element 1:\n'B'\n'A'\n\n- ('A', 'B')\n?        ^\n\n+ ('A', 'A')\n?        ^\n"", 'traceback_frame': [{'filename': '__test__.py', 'lineno': 61, 'funcname': 'test_high_correlation', 'codeline': '        self.assertEqual((ax.get_xlabel(), ax.get_ylabel()), expected_labels)'}], 'traceback_str': 'Traceback (most recent call last):\n  File ""__test__.py"", line 61, in test_high_correlation\nAssertionError: Tuples differ: (\'A\', \'B\') != (\'A\', \'A\')\n\nFirst differing element 1:\n\'B\'\n\'A\'\n\n- (\'A\', \'B\')\n?        ^\n\n+ (\'A\', \'A\')\n?        ^\n\n'}",4/6,/data/wyk/autosd/arhe/bigcodebench5/1023/solution_v0_s0_o0.py
"Calculate the correlation matrix of a DataFrame and plot a scatter plot for the pair of columns with the highest absolute correlation. Exception Handling: - Raises ValueError if the input DataFrame is empty. - Raises TypeError if any column in the DataFrame is non-numeric. - Raises ValueError if the DataFrame has fewer than two columns.
The function should output with:
    ax (plt.Axes): The scatter plot of the pair of columns with the highest absolute correlation.
You should write self-contained code starting with:
```
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
def task_func(dataframe):
```",10,1,"
def task_func(dataframe):
    if dataframe.empty:
        raise ValueError(""Input DataFrame is empty"")

    if not all(dataframe.dtypes.apply(pd.api.types.is_numeric_dtype)):
        raise TypeError(""Non-numeric column(s) found in the DataFrame"")

    if len(dataframe.columns) < 2:
        raise ValueError(""DataFrame must have at least two columns"")

    corr_matrix = dataframe.corr().abs()
    np.fill_diagonal(corr_matrix.values, 0)  # Set diagonal values to 0 to avoid self-correlation

    # Find the pair of columns with the highest absolute correlation
    max_corr_pair = corr_matrix.unstack().idxmax()
    col1, col2 = max_corr_pair

    # Ensure the pair is ordered consistently (e.g., lexicographically)
    col1, col2 = sorted([col1, col2])

    fig, ax = plt.subplots()
    ax.scatter(dataframe[col1], dataframe[col2])
    ax.set_xlabel(col1)
    ax.set_ylabel(col2)

    return ax
",fail,test_high_correlation,"    def test_high_correlation(self):
        """"""
        Test if the function correctly identifies and plots the pair of columns with the highest positive correlation.
        """"""
        np.random.seed(0)  # Set a fixed seed for reproducibility
        df = pd.DataFrame(
            {""A"": np.arange(100), ""B"": np.arange(100) * 2, ""C"": np.random.rand(100)}
        )
        ax = task_func(df)
        corr = df.corr()
        abs_corr = corr.abs()
        max_corr = abs_corr.unstack().dropna().nlargest(3).iloc[-1]
        expected_pair = np.where(abs_corr == max_corr)
        expected_labels = (
            df.columns[expected_pair[0][0]],
            df.columns[expected_pair[1][0]],
        )
        self.assertEqual((ax.get_xlabel(), ax.get_ylabel()), expected_labels)","{'stat': 'fail', 'exception_type': ""AssertionError: Tuples differ: ('A', 'B') != ('A', 'A')\n\nFirst differing element 1:\n'B'\n'A'\n\n- ('A', 'B')\n?        ^\n\n+ ('A', 'A')\n?        ^\n"", 'traceback_frame': [{'filename': '__test__.py', 'lineno': 52, 'funcname': 'test_high_correlation', 'codeline': '        self.assertEqual((ax.get_xlabel(), ax.get_ylabel()), expected_labels)'}], 'stdout_logs': '', 'traceback_str': 'Traceback (most recent call last):\n  File ""__test__.py"", line 52, in test_high_correlation\nAssertionError: Tuples differ: (\'A\', \'B\') != (\'A\', \'A\')\n\nFirst differing element 1:\n\'B\'\n\'A\'\n\n- (\'A\', \'B\')\n?        ^\n\n+ (\'A\', \'A\')\n?        ^\n\n'}",4/6,/data/wyk/autosd/arhe/bigcodebench5/1023/solution_v1_s10_o0.py
